.PHONY=

# Try not to change the order of these items. This is the order the linker
# runs through them in. If you change the order around, you'll begin to get
# undefined symbol complaints.
#
# As a rule, $(MAKE) sure to put object files with references to external symbols
# before object files without unresolved symbols. LD seems to run through all
# files resolving as it goes, so if it sees an unresolved symbol too late,
# it halts saying that the symbol cannot be resolved, even if the symbol is
# defined in one of the objects passed on the command line.
EXECOBJS=__kthreads.a __karchThreads.a kernel.a archKernel.a firmwareCore.a \
	platformCore.a \
	memoryTrib.a interruptTrib.a execTrib.a distributaryTrib.a \
	timerTrib.a cpuTrib.a processTrib.a vfsTrib.a taskTrib.a debugTrib.a \
	floodplainn.a \
	platformCore.a chipset.a chipsetCore.a archCore.a firmwareCore.a \
	__kclasses.a __kstdlib.a __kcxxabi.a libx86mp.a libacpi.a \
	libzudiIndexParser.o libzbzcore.a udi_index.o \
	drivers.a metalanguages.a

GOAL=../core.o

all: $(GOAL)

# The kernel core file produced here must be relocatable. We have to link it
# with the Endo Kernel FS fragments later on in the kernel build process.
$(GOAL): $(EXECOBJS)
	$(LD) $(LDFLAGS) -nostartfiles -e main -r -o $(GOAL) \
		-Xlinker -\( $(EXECOBJS) -Xlinker -\)

include clean.mk
include __kstdlib/__kstdlib.mk
include kernel/common/tribs.mk
include commonlibs/libs.mk

udi_index.o: generate_udi_index udi_indexTmp.s
udi_indexTmp.s: udi_index.S
	$(CPP) $(CPPFLAGS) $< >$@
generate_udi_index:
	@echo "Creating driver index."
	zudiindex -c le -i .
	@echo "Adding chipset specific drivers to index."
	zudiindex-addall -drivers chipset/$(ZCHIPSET) .
	@echo "Adding chipset specific metalanguages to index."
	zudiindex-addall -metas chipset/$(ZCHIPSET) .
	@echo "Adding common metalanguages to index."
	zudiindex-addall -metas commonlibs/metalanguages .
	@echo "Adding common drivers to index."
	zudiindex-addall -drivers commonlibs/drivers .

archCore.a:
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	@echo Building arch core dir.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	cd arch/$(ZARCH); $(MAKE)

chipset.a:
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	@echo Building chipset/ dir.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	cd chipset; $(MAKE)

chipsetCore.a:
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	@echo Building chipset core dir.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	cd chipset/$(ZCHIPSET); $(MAKE)

firmwareCore.a:
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	@echo Building firmware core dir.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	cd firmware/$(ZFIRMWARE); $(MAKE)

platformCore.a:
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	@echo Building platform core dir.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	cd platform/$(ZARCH)-$(ZCHIPSET); $(MAKE)

__kthreads.a:
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	@echo Building __kthreads/ dir.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	cd __kthreads; $(MAKE)

__karchThreads.a:
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	@echo Building arch __kthreads dir.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	cd __kthreads/$(ZARCH); $(MAKE)

kernel.a:
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	@echo Building kernel/common/ dir.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	cd kernel/common; $(MAKE)

archKernel.a:
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	@echo Building arch kernel dir.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	cd kernel/$(ZARCH); $(MAKE)

__kclasses.a:
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	@echo Building __kclasses/ dir.
	@echo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	cd __kclasses; $(MAKE)


